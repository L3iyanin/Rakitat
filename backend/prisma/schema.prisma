// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id                     Int           @id @default(autoincrement())
    username               String        @unique
    fullName               String
    login                  String        @unique
    imgUrl                 String
    wins                   Int           @default(0)
    loses                  Int           @default(0)
    twoFactorAuth          Boolean       @default(false)
    friends                User[]        @relation("friends")
    friendsRelation        User[]        @relation("friends")
    friendRequests         User[]        @relation("friendRequests")
    friendRequestsRelation User[]        @relation("friendRequests")
    achievements           Achievement[]
    createdChannles        Channel[]
    members                Member[]
    messages               Message[]
}

model Match {
    id           Int      @id @default(autoincrement())
    isMatching   Boolean
    live         Boolean
    player1Id    Int
    player2Id    Int
    player1Score Int      @default(0)
    player2Score Int      @default(0)
    date         DateTime @default(now())
    scoreToWin   Int // can be 3 or 7
}

model Achievement {
    id          Int    @id @default(autoincrement())
    name        String
    description String
    imgUrl      String
    users       User[]
}

model Channel {
    id            Int           @id @default(autoincrement())
    name          String
    owner         User          @relation(fields: [userId], references: [id])
    userId        Int
    members       Member[]
    messages      Message[]
    status        ChannleStatus
    password      String
    lastMessagdID Int
}

enum ChannleStatus {
    DM
    PUBLIC
    PRIVATE
    PROTECTED
}

model Member {
    id        Int          @id @default(autoincrement())
    user      User         @relation(fields: [userId], references: [id])
    status    MemberStatus
    until     DateTime?
    role      Roles
    Channel   Channel      @relation(fields: [channelId], references: [id])
    channelId Int
    userId    Int
}

enum MemberStatus {
    BANNED
    MUTED
    NONE
}

enum Roles {
    OWNER
    ADMIN
    MEMBER
}

model Message {
    id        Int      @id @default(autoincrement())
    content   String
    sender    User     @relation(fields: [userId], references: [id])
    channel   Channel  @relation(fields: [channelId], references: [id])
    date      DateTime @default(now())
    channelId Int
    userId    Int
}
