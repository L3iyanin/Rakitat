// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id              Int           @id @default(autoincrement())
    username        String        @unique
    fullName        String
    login           String        @unique
    imgUrl          String
    wins            Int           @default(0)
    loses           Int           @default(0)
    twoFactorAuth   Boolean       @default(false)
    friends         User[]        @relation("friends")
    friendsRelation User[]        @relation("friends")
    achievements    Achievement[]
    members         Member[]
}

model Match {
    id           Int      @id @default(autoincrement())
    isMatching   Boolean
    live         Boolean
    player1Id    Int
    player2Id    Int
    player1Score Int      @default(0)
    player2Score Int      @default(0)
    date         DateTime @default(now())
    scoreToWin   Int // can be 3 or 7
}

model Achievement {
    id          Int    @id @default(autoincrement())
    name        String
    description String
    imgUrl      String
    users       User[]
}

model Channel {
    id       Int         @id @default(autoincrement())
    name     String      @unique // in case of dm, it will be the name of the other user, in case of group, it will be the name of the group
    imgUrl   String? // same as above
    members  Member[]
    messages Message[]
    type     ChannelType
    password String?
}

enum ChannelType {
    DM
    PUBLIC
    PRIVATE
    PROTECTED
}

model Member {
    id        Int          @id @default(autoincrement())
    user      User         @relation(fields: [userId], references: [id])
    status    MemberStatus
    until     DateTime?
    role      Roles
    Channel   Channel      @relation(fields: [channelId], references: [id])
    channelId Int
    userId    Int
    messages  Message[]
}

enum MemberStatus {
    BLOCKED
    MUTED
    NONE
}

enum Roles {
    OWNER
    ADMIN
    MEMBER
}

model Message {
    id        Int      @id @default(autoincrement())
    content   String
    from      Member   @relation(fields: [memberId], references: [id])
    channel   Channel  @relation(fields: [channelId], references: [id])
    channelId Int
    memberId  Int
    createdAt DateTime @default(now())
    invite    Boolean  @default(false)
}
